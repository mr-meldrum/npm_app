def IMAGE = 'stag-docker-repo.clix.io:5000/npm-app'
/* def VERSION = ${env.BUILD_ID} */

pipeline {
    agent any

    environment {
        CI = 'true'
        HOME = '.'
    }

    stages {
        stage('Build') {
            agent {
                docker {
                    reuseNode true
                    image 'node:6-alpine'
                    args '-p 3000:3000'
                }
            }
            steps {
                sh 'printenv || true'
                sh 'pwd || true'
                sh 'hostname || true'
                sh 'npm install'
                sh 'touch file.tmp'
            }
        }

        stage('Test') {
            agent {
                docker {
                    reuseNode true
                    image 'node:6-alpine'
                    args '-p 3000:3000'
                }
            }
            steps {
                sh './jenkins/scripts/test.sh'
            }
        }

        stage('UI test') {
            options {
                timeout(time: 2, unit: 'MINUTES') 
            }
            agent {
                docker {
                    reuseNode true
                    image 'node:6-alpine'
                    args '-p 3000:3000'
                }
            }
            steps {
                sh './jenkins/scripts/deliver.sh'
                input message: 'Finished using the web site? (Click "Proceed" to continue)'
                sh './jenkins/scripts/kill.sh'
            }
        }

        stage('Build image') {
            steps {
                sh """
                    docker build -t ${IMAGE} .
                    docker tag ${IMAGE} ${IMAGE}:${env.BUILD_ID}
                """
            }
        }

        stage('Image test') {
            steps {
		echo "Launching docker image"

                script {
    		    docker.image('stag-docker-repo.clix.io:5000/npm-app:latest').inside {
			echo "Starting npm testing"
			sh(returnStdout: true, script: 'npm test')
		    }
	        }
	    }
        }

        stage('Push image') {
            steps {
                sh """
                    docker push ${IMAGE}:${env.BUILD_ID}
                    docker push ${IMAGE}:latest
                """
            }
        }
    }
    post {
        success {
            echo "[status] $WORKSPACE cleanup"

            deleteDir()

            emailext (
                subject: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """<p>SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        } 

        failure {
            echo "[status] failed, removing shared volume"

            emailext (
                subject: "FAIL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """<p>FAIL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
    }
}
